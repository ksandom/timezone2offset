#!/bin/bash
# List offset, timezone, and description from a provided timezone or offset.
# Syntax: $0 timezoneOrOptions
#
# timezone is generally a few letters. Eg:
#   NZDT
#   BST
# Or an offset
#   +1
#   -5


## End of internal documentation. ##

data=/tmp/tzList.html
trimmedData=/tmp/trimmedTzList
processedData=/tmp/tzList.csv
cleanup="true"

function makeOneLine
{
    spareLine=""

    while read -r activeLine; do
        if [ "${activeLine::1}" == '0' ]; then
            spareLine="$activeLine"
        else
            echo "$(echo "$spareLine" | cut -b3-),$(echo "$activeLine" | cut -b3-)"
        fi
    done
}

function prependOffset
{
    while read -r line; do
        offset="$(echo "$line" | sed 's/.*UTC//g')"
        echo "$offset,$line"
    done
}

function transformData
{
    sed 's/&lt;.*;\/ref>//g;s/| /0,/g;s/|data-sort-value=".*\[/1,/g;s/\]//g;s/ .*\[/,/g;s/ *|0//g;s/−/-/g;s/|UTC±00//g'
}

function getData
{
    if [ ! -e "$processedData" ]; then
        # Get the raw data.
        wget "https://en.wikipedia.org/w/index.php?title=List_of_time_zone_abbreviations&action=edit" -O "$data" >&2

        # Trim out just the stuff we want.
        grep -A100000 "Abbr|Abbr.|Abbreviation" "$data" | grep -B100000 'colspan=3|Source:&lt;ref' | grep '^|\(data-sort\| \)' > "$trimmedData"

        # Make it readable.
        cat "$trimmedData" | transformData | makeOneLine > "$processedData"

        # Clean up the stuff that we don't need.
        if [ "$cleanup" == "true" ]; then
            rm -f "$data" "$trimmedData"
        fi
    fi
}

function format
{
    {
        read -r firstLine

        if [ "${firstLine:0:6}" != "Abbrev" ]; then
            echo "Abbreviation,Description,Offset"
        fi

        echo "$firstLine"

        while read -r line; do
            echo "$line"
        done
    } | sed 's/,/\t/g' | {
        if [ -t 1 ]; then
            # Terminal.
            awk -F"\t" 'BEGIN {OFS = FS} {print $3, $4, $1, $2}' | correctSort | createTable
        else
            # Piped to somewhere else.
            awk -F"\t" 'BEGIN {OFS = ","} {print $3 $4, $1, $2}'
        fi
    }
}

function reformat
{
    sed 's/,/\t/g' | correctSort | createTable
}

function correctSort
{
    local data="$(cat -)"

    echo "$data" | head -n1
    echo "$data" | grep 'UTC\(-\|−\)' | sort -r
    echo "$data" | grep -v '\(Offset\|UTC\(+\|-\|−\)\)' | sort
    echo "$data" | grep 'UTC+' | sort
}

function createTable
{
    column -t -s"$(echo -e "\t")"
}

function readFromSTDIN
{
    while read -r timezone; do
        lookup "$timezone"
    done
}

function prefixOffset
{
    # Make sure that the offset is properly formatted before we try searching for it.
    if [ "${1:0:1}" == '+' ] || [ "${1:0:1}" == '-' ]; then
        if [ "${1:2:1}" == '' ]; then
            echo "${1:0:1}0${1:1:1}"
        else
            echo "$1"
        fi
    else
        if [ "${1:1:1}" == '' ]; then
            echo "0${1:0:1}"
        else
            echo "$1"
        fi
    fi
}

function lookup
{

    if [ "${1:0:1}" == '+' ] || [ "${1:0:1}" == '-' ]; then
        local offset="$(prefixOffset "$1")"
        grep "UTC$offset$" "$processedData"
    elif [ "${1:2:1}" == '' ]; then
        local offset="$(prefixOffset "$1")"
        if [ "$offset" == '00' ]; then
            grep "UTC.00" "$processedData"
        else
            grep "UTC+$offset$" "$processedData"
        fi
    else
        local timezone="$(echo "$1" | tr '[:lower:]' '[:upper:]')"
        grep "^$timezone," "$processedData"
    fi
}

function showHelp
{
    startFrom=1
    if [ "$1" == '--noHeader' ]; then
        startFrom=2
    fi

    # Show the internal documentation.
    {
        grep -B1000 '## End of internal documentation. ##' "$0" |
            grep '^#' |
            grep -v '^#!' |
            grep -v '##' |
            cut -b3-
    } | sed 's/\$0/'"$(basename "$0")"'/g' | tail -n+"$startFrom"

    # Show the options available.
    echo -e "\nOptions:"
    {
        grep -A1000 '## Options begin #[#]' $0 |
            grep ') [#]'
    } | sed 's/^ *"//g; s/") # /'"\t"'/g; s/.*\*) # /*timezone\/offset*'"\t"'/g' | createTable
}

getData

## Options begin ##
case "$1" in
    "") # No parameters. Use STDIN.
        readFromSTDIN | format
    ;;
    "reformat") # Format CSV data for displaying to the user. Useful after piping through something else.
        reformat
    ;;
    "same") # Display other timezones that are the same as yours.
        myOffset="$(date +%z)"
        lookup "${myOffset:0:3}" | format
    ;;
    "me") # Display your own timezone.
        myOffset="$(date +%Z)"
        lookup "$myOffset" | format
    ;;
    "all") # List all known timezones.
        cat "$processedData" | format
    ;;
    "--help") # Show this help.
        showHelp "$2"
    ;;
    *) # Assume it's a timezone, and look it up.
        for timezone in $@; do
            lookup "$timezone"
        done | format
    ;;
esac
